'''
# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vrT8miLkDyIQhdzZ39Bu8WfliuCBzjUG
"""

# prompt: Desenvolver um programa em Python que receba uma frase inserida pelo usuário e realize diversas operações de análise e formatação
# Requisitos:
# 1. Entrada do Usuário:
#    - Solicitar ao usuário que insira uma frase.
#    - Verificar se a entrada não está vazia e tratar o erro caso necessário. (crie uma nova função no bloco de funções)

def validate_input(user_input):
  """
  Validates user input to ensure it's not empty.

  Args:
    user_input: The string input from the user.

  Returns:
    True if the input is valid (not empty), False otherwise.
  """
  return bool(user_input.strip())


def main():
  while True:
    user_phrase = input("Digite uma frase: ")
    if validate_input(user_phrase):
      break
    else:
        print("Entrada inválida. A frase não pode estar vazia.")

  # Rest of the program using the valid user_phrase would come here...
  print("Frase válida:", user_phrase)

if __name__ == "__main__":
  main()

# prompt: 2. Análise da Frase:
#    - Contagem de Caracteres: Calcular o número total de caracteres da frase (incluindo espaços).
#    - Contagem de Palavras: Dividir a frase em palavras (utilizando o método `split()`) e determinar quantas palavras existem.
#    - Maior Palavra: Identificar a palavra com o maior número de caracteres dentre as encontradas.

def validate_input(user_input):
  """
  Validates user input to ensure it's not empty.

  Args:
    user_input: The string input from the user.

  Returns:
    True if the input is valid (not empty), False otherwise.
  """
  return bool(user_input.strip())


def main():
  while True:
    user_phrase = input("Digite uma frase: ")
    if validate_input(user_phrase):
      break
    else:
        print("Entrada inválida. A frase não pode estar vazia.")

  # Análise da Frase
  char_count = len(user_phrase)
  words = user_phrase.split()
  word_count = len(words)

  if word_count > 0:
    longest_word = max(words, key=len)
  else:
    longest_word = ""

  print("Frase válida:", user_phrase)
  print("Número de caracteres:", char_count)
  print("Número de palavras:", word_count)
  print("Maior palavra:", longest_word)

if __name__ == "__main__":
  main()

# prompt: 3. Manipulação e Formatação:
#    - Inversão da Frase:
#      - Inverter a frase por meio dos caracteres (utilizando slicing com `[::-1]`);
#      - Inverter a ordem das palavras e reconstruir a frase.
#    - Alteração de Caixa: Converter a frase para todas as letras maiúsculas e para todas as letras minúsculas.
#    - Tupla de Palavras: Criar uma tupla contendo todas as palavras da frase.

def validate_input(user_input):
  """
  Validates user input to ensure it's not empty.

  Args:
    user_input: The string input from the user.

  Returns:
    True if the input is valid (not empty), False otherwise.
  """
  return bool(user_input.strip())


def main():
  while True:
    user_phrase = input("Digite uma frase: ")
    if validate_input(user_phrase):
      break
    else:
        print("Entrada inválida. A frase não pode estar vazia.")

  # Análise da Frase
  char_count = len(user_phrase)
  words = user_phrase.split()
  word_count = len(words)

  if word_count > 0:
    longest_word = max(words, key=len)
  else:
    longest_word = ""

  print("Frase válida:", user_phrase)
  print("Número de caracteres:", char_count)
  print("Número de palavras:", word_count)
  print("Maior palavra:", longest_word)

  # Inversão da frase (caracteres)
  reversed_chars = user_phrase[::-1]
  print("Frase invertida (caracteres):", reversed_chars)

  # Inversão da ordem das palavras
  reversed_words = " ".join(reversed(words))
  print("Frase invertida (palavras):", reversed_words)

  # Alteração de caixa
  upper_phrase = user_phrase.upper()
  lower_phrase = user_phrase.lower()
  print("Frase em maiúsculas:", upper_phrase)
  print("Frase em minúsculas:", lower_phrase)

  # Tupla de palavras
  word_tuple = tuple(words)
  print("Tupla de palavras:", word_tuple)

if __name__ == "__main__":
  main()

'''

# prompt: 4. Saída Formatada:
#   - Utilizar f-strings para exibir os resultados de forma organizada, apresentando as seguintes informações:
#      - Número de caracteres da frase.
#      - Número de palavras.
#      - A palavra com maior comprimento.
#      - A frase invertida (por caracteres e por palavras).
#      - A frase em maiúsculas e minúsculas.
#      - A tupla formada pelas palavras da frase.

def validate_input(user_input):
  """
  Validates user input to ensure it's not empty.

  Args:
    user_input: The string input from the user.

  Returns:
    True if the input is valid (not empty), False otherwise.
  """
  return bool(user_input.strip())


def main():
  while True:
    user_phrase = input("Digite uma frase: ")
    if validate_input(user_phrase):
      break
    else:
        print("Entrada inválida. A frase não pode estar vazia.")

  # Análise da Frase
  char_count = len(user_phrase)
  words = user_phrase.split()
  word_count = len(words)

  if word_count > 0:
    longest_word = max(words, key=len)
  else:
    longest_word = ""

  # Inversão da frase (caracteres)
  reversed_chars = user_phrase[::-1]

  # Inversão da ordem das palavras
  reversed_words = " ".join(reversed(words))

  # Alteração de caixa
  upper_phrase = user_phrase.upper()
  lower_phrase = user_phrase.lower()

  # Tupla de palavras
  word_tuple = tuple(words)

  # Saída formatada com f-strings
  print(f"{'='*30}\nResultados da Análise da Frase:\n{'='*30}")
  print(f"Frase: {user_phrase}")
  print(f"Número de caracteres: {char_count}")
  print(f"Número de palavras: {word_count}")
  print(f"Maior palavra: {longest_word}")
  print(f"Frase invertida (caracteres): {reversed_chars}")
  print(f"Frase invertida (palavras): {reversed_words}")
  print(f"Frase em maiúsculas: {upper_phrase}")
  print(f"Frase em minúsculas: {lower_phrase}")
  print(f"Tupla de palavras: {word_tuple}")
  print(f"{'='*30}")

if __name__ == "__main__":
  main()